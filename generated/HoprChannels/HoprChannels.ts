// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Announcement extends ethereum.Event {
  get params(): Announcement__Params {
    return new Announcement__Params(this);
  }
}

export class Announcement__Params {
  _event: Announcement;

  constructor(event: Announcement) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get publicKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get multiaddr(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ChannelBumped extends ethereum.Event {
  get params(): ChannelBumped__Params {
    return new ChannelBumped__Params(this);
  }
}

export class ChannelBumped__Params {
  _event: ChannelBumped;

  constructor(event: ChannelBumped) {
    this._event = event;
  }

  get source(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newCommitment(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get ticketEpoch(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get channelBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ChannelClosureFinalized extends ethereum.Event {
  get params(): ChannelClosureFinalized__Params {
    return new ChannelClosureFinalized__Params(this);
  }
}

export class ChannelClosureFinalized__Params {
  _event: ChannelClosureFinalized;

  constructor(event: ChannelClosureFinalized) {
    this._event = event;
  }

  get source(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get closureFinalizationTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get channelBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ChannelClosureInitiated extends ethereum.Event {
  get params(): ChannelClosureInitiated__Params {
    return new ChannelClosureInitiated__Params(this);
  }
}

export class ChannelClosureInitiated__Params {
  _event: ChannelClosureInitiated;

  constructor(event: ChannelClosureInitiated) {
    this._event = event;
  }

  get source(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get closureInitiationTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChannelFunded extends ethereum.Event {
  get params(): ChannelFunded__Params {
    return new ChannelFunded__Params(this);
  }
}

export class ChannelFunded__Params {
  _event: ChannelFunded;

  constructor(event: ChannelFunded) {
    this._event = event;
  }

  get funder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get source(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get destination(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ChannelOpened extends ethereum.Event {
  get params(): ChannelOpened__Params {
    return new ChannelOpened__Params(this);
  }
}

export class ChannelOpened__Params {
  _event: ChannelOpened;

  constructor(event: ChannelOpened) {
    this._event = event;
  }

  get source(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TicketRedeemed extends ethereum.Event {
  get params(): TicketRedeemed__Params {
    return new TicketRedeemed__Params(this);
  }
}

export class TicketRedeemed__Params {
  _event: TicketRedeemed;

  constructor(event: TicketRedeemed) {
    this._event = event;
  }

  get source(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nextCommitment(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get ticketEpoch(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ticketIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get proofOfRelaySecret(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get winProb(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get signature(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }
}

export class HoprChannels__channelsResult {
  value0: BigInt;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Bytes,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class HoprChannels extends ethereum.SmartContract {
  static bind(address: Address): HoprChannels {
    return new HoprChannels("HoprChannels", address);
  }

  FUND_CHANNEL_MULTI_SIZE(): BigInt {
    let result = super.call(
      "FUND_CHANNEL_MULTI_SIZE",
      "FUND_CHANNEL_MULTI_SIZE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FUND_CHANNEL_MULTI_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FUND_CHANNEL_MULTI_SIZE",
      "FUND_CHANNEL_MULTI_SIZE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOKENS_RECIPIENT_INTERFACE_HASH(): Bytes {
    let result = super.call(
      "TOKENS_RECIPIENT_INTERFACE_HASH",
      "TOKENS_RECIPIENT_INTERFACE_HASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TOKENS_RECIPIENT_INTERFACE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TOKENS_RECIPIENT_INTERFACE_HASH",
      "TOKENS_RECIPIENT_INTERFACE_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canImplementInterfaceForAddress(
    interfaceHash: Bytes,
    account: Address
  ): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    interfaceHash: Bytes,
    account: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  channels(param0: Bytes): HoprChannels__channelsResult {
    let result = super.call(
      "channels",
      "channels(bytes32):(uint256,bytes32,uint256,uint256,uint8,uint256,uint32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new HoprChannels__channelsResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_channels(
    param0: Bytes
  ): ethereum.CallResult<HoprChannels__channelsResult> {
    let result = super.tryCall(
      "channels",
      "channels(bytes32):(uint256,bytes32,uint256,uint256,uint8,uint256,uint32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HoprChannels__channelsResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  publicKeys(param0: Address): Bytes {
    let result = super.call("publicKeys", "publicKeys(address):(bytes)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBytes();
  }

  try_publicKeys(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("publicKeys", "publicKeys(address):(bytes)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  secsClosure(): BigInt {
    let result = super.call("secsClosure", "secsClosure():(uint32)", []);

    return result[0].toBigInt();
  }

  try_secsClosure(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("secsClosure", "secsClosure():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _secsClosure(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AnnounceCall extends ethereum.Call {
  get inputs(): AnnounceCall__Inputs {
    return new AnnounceCall__Inputs(this);
  }

  get outputs(): AnnounceCall__Outputs {
    return new AnnounceCall__Outputs(this);
  }
}

export class AnnounceCall__Inputs {
  _call: AnnounceCall;

  constructor(call: AnnounceCall) {
    this._call = call;
  }

  get publicKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get multiaddr(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AnnounceCall__Outputs {
  _call: AnnounceCall;

  constructor(call: AnnounceCall) {
    this._call = call;
  }
}

export class BumpChannelCall extends ethereum.Call {
  get inputs(): BumpChannelCall__Inputs {
    return new BumpChannelCall__Inputs(this);
  }

  get outputs(): BumpChannelCall__Outputs {
    return new BumpChannelCall__Outputs(this);
  }
}

export class BumpChannelCall__Inputs {
  _call: BumpChannelCall;

  constructor(call: BumpChannelCall) {
    this._call = call;
  }

  get source(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newCommitment(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BumpChannelCall__Outputs {
  _call: BumpChannelCall;

  constructor(call: BumpChannelCall) {
    this._call = call;
  }
}

export class FinalizeChannelClosureCall extends ethereum.Call {
  get inputs(): FinalizeChannelClosureCall__Inputs {
    return new FinalizeChannelClosureCall__Inputs(this);
  }

  get outputs(): FinalizeChannelClosureCall__Outputs {
    return new FinalizeChannelClosureCall__Outputs(this);
  }
}

export class FinalizeChannelClosureCall__Inputs {
  _call: FinalizeChannelClosureCall;

  constructor(call: FinalizeChannelClosureCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FinalizeChannelClosureCall__Outputs {
  _call: FinalizeChannelClosureCall;

  constructor(call: FinalizeChannelClosureCall) {
    this._call = call;
  }
}

export class FundChannelMultiCall extends ethereum.Call {
  get inputs(): FundChannelMultiCall__Inputs {
    return new FundChannelMultiCall__Inputs(this);
  }

  get outputs(): FundChannelMultiCall__Outputs {
    return new FundChannelMultiCall__Outputs(this);
  }
}

export class FundChannelMultiCall__Inputs {
  _call: FundChannelMultiCall;

  constructor(call: FundChannelMultiCall) {
    this._call = call;
  }

  get account1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get account2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount2(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class FundChannelMultiCall__Outputs {
  _call: FundChannelMultiCall;

  constructor(call: FundChannelMultiCall) {
    this._call = call;
  }
}

export class InitiateChannelClosureCall extends ethereum.Call {
  get inputs(): InitiateChannelClosureCall__Inputs {
    return new InitiateChannelClosureCall__Inputs(this);
  }

  get outputs(): InitiateChannelClosureCall__Outputs {
    return new InitiateChannelClosureCall__Outputs(this);
  }
}

export class InitiateChannelClosureCall__Inputs {
  _call: InitiateChannelClosureCall;

  constructor(call: InitiateChannelClosureCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitiateChannelClosureCall__Outputs {
  _call: InitiateChannelClosureCall;

  constructor(call: InitiateChannelClosureCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RedeemTicketCall extends ethereum.Call {
  get inputs(): RedeemTicketCall__Inputs {
    return new RedeemTicketCall__Inputs(this);
  }

  get outputs(): RedeemTicketCall__Outputs {
    return new RedeemTicketCall__Outputs(this);
  }
}

export class RedeemTicketCall__Inputs {
  _call: RedeemTicketCall;

  constructor(call: RedeemTicketCall) {
    this._call = call;
  }

  get source(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nextCommitment(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get ticketEpoch(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get ticketIndex(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get proofOfRelaySecret(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get winProb(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class RedeemTicketCall__Outputs {
  _call: RedeemTicketCall;

  constructor(call: RedeemTicketCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}
