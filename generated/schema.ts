// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Channel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("source", Value.fromString(""));
    this.set("destination", Value.fromString(""));
    this.set("importanceScore", Value.fromI32(0));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Channel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Channel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Channel", id.toString(), this);
    }
  }

  static load(id: string): Channel | null {
    return changetype<Channel | null>(store.get("Channel", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    return value!.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get destination(): string {
    let value = this.get("destination");
    return value!.toString();
  }

  set destination(value: string) {
    this.set("destination", Value.fromString(value));
  }

  get importanceScore(): i32 {
    let value = this.get("importanceScore");
    return value!.toI32();
  }

  set importanceScore(value: i32) {
    this.set("importanceScore", Value.fromI32(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class AddressNode extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hoprAddress", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddressNode entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddressNode must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddressNode", id.toString(), this);
    }
  }

  static load(id: string): AddressNode | null {
    return changetype<AddressNode | null>(store.get("AddressNode", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hoprAddress(): string {
    let value = this.get("hoprAddress");
    return value!.toString();
  }

  set hoprAddress(value: string) {
    this.set("hoprAddress", Value.fromString(value));
  }
}
